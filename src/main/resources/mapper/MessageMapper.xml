<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forum.mapper.MessageMapper">
    <resultMap id="BaseResultMap" type="com.forum.entity.Message">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="from_id" jdbcType="INTEGER" property="fromId"/>
        <result column="to_id" jdbcType="INTEGER" property="toId"/>
        <result column="conversation_id" jdbcType="VARCHAR" property="conversationId"/>
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <select id="selectConversations" resultMap="BaseResultMap">
    select
        <include refid="Base_Column_List" />
    from
        message
    where
        id
    in (
        select max(id)
        from message
        where status != 2
        and from_id != 1
        and (from_id = #{userId} or to_id = #{userId})
        group by conversation_id
    )
    order by id desc
    limit #{offset}, #{limit}
    </select>
    <select id="selectConversationCount" resultType="java.lang.Integer">
        select
           count(m.max_id)
        from(
            select max(id) max_id
            from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) m
    </select>
    <select id="selectLetters" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List" />
        from
            message
        where
            status != 2
        and
            from_id != 1
        and
            conversation_id = #{conversationId}
        order by id desc
        limit
            #{offset}, #{limit}
    </select>
    <select id="selectLetterCount" resultType="java.lang.Integer">
        select
            count(id)
        from
            message
        where
            status != 2
        and
            from_id != 1
        and
            conversation_id = #{conversationId}
    </select>
    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        select
            count(id)
        from
            message
        where
            status = 0
        and
            from_id != 1
        and
            to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>

</mapper>